'use strict';

var _path = _interopRequireDefault(require('path'));

var _uuid;

function _load_uuid() {
  return _uuid = _interopRequireDefault(require('uuid'));
}

var _rimraf;

function _load_rimraf() {
  return _rimraf = _interopRequireDefault(require('rimraf'));
}

var _Exp;

function _load_Exp() {
  return _Exp = require('../Exp');
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

jasmine.DEFAULT_TIMEOUT_INTERVAL = 240000;


describe('Template Apps', () => {
  it('should download the starter app template and extract it', _asyncToGenerator(function* () {
    process.env.UNSAFE_EXPO_HOME_DIRECTORY = _path.default.join('/', 'tmp', `.expo-${(_uuid || _load_uuid()).default.v1()}`);

    yield (0, (_Exp || _load_Exp()).clearXDLCacheAsync)();
    let dir = _path.default.join('/', 'tmp', `.expo-${(_uuid || _load_uuid()).default.v1()}`);
    let templateDownload = yield (0, (_Exp || _load_Exp()).downloadTemplateApp)('tabs', dir, {
      name: `test-template-${new Date().valueOf()}`,
      progressFunction: function () {},
      retryFunction: function () {}
    });
    expect(templateDownload).not.toBeNull();
    // Extract the template we just downloaded
    let projectRoot = yield (0, (_Exp || _load_Exp()).extractTemplateApp)(templateDownload.starterAppPath, templateDownload.name, templateDownload.root);

    (_rimraf || _load_rimraf()).default.sync(process.env.UNSAFE_EXPO_HOME_DIRECTORY);
    (_rimraf || _load_rimraf()).default.sync(dir);
  }));
});
//# sourceMappingURL=../__sourcemaps__/__integration_tests__/Template-test.js.map
