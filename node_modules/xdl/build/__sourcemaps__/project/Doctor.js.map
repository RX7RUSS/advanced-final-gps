{"version":3,"sources":["project/Doctor.js"],"names":["async","projectRoot","let","npmVersionResponse","await","spawnAsync","npmVersion","_","trim","stdout","semver","lt","MIN_NPM_VERSION","gte","BAD_NPM_VERSION","ProjectUtils","logError","FATAL","clearNotification","e","logWarning","WARNING","NO_ISSUES","_checkNpmVersionAsync","Watchman","isPlatformSupported","watchmanVersion","unblockAndGetVersionAsync","MIN_WATCHMAN_VERSION","warningMessage","process","platform","_checkWatchmanVersionAsync","schemaPath","exp","pkg","readConfigJsonAsync","schema","JSON","parse","fs","readFile","promise","validateWithSchema","validateWithSchemaFileAsync","assetSchemas","ExpSchema","getAssetSchemasAsync","sdkVersion","Promise","all","map","fieldPath","meta","asset","contentTypePattern","contentTypeHuman","value","get","filePath","path","resolve","contentType","existsSync","fileType","readChunk","mime","request","head","url","headers","match","RegExp","configName","configFilenameAsync","Config","helpUrl","message","_validateAssetFieldsAsync","expJsonExists","fileExistsAsync","join","appJsonExists","getSchemaAsync","errorMessage","dependencies","sdkVersions","Api","sdkVersionsAsync","keys","validation","reactNativeVersionWarnings","reactNative","reactNativeTag","sdkVersionObject","major","Versions","parseSdkVersionFromTag","_validatePackageJsonAndExpJsonAsync","nodeModulesPath","result","statSync","isDirectory","isFile","Binaries","sourceBashLoginScriptsAsync","npmls","npmlsCommand","cwd","npmlsDependencies","errorStrings","forEach","versionRequired","dependency","installedDependency","version","peerMissing","push","satisfies","includes","from","length","_validateNodeModulesAsync","validateAsync","validateLowLatencyAsync","validateWithNetworkAsync","allowNetwork","status","newStatus","ignoreNodeModulesValidation","nodeModulesStatus","sdkPkg","EXPO_SDK_NOT_INSTALLED","mainFilePath","main","mainFile","EXPO_SDK_INSTALLED_AND_IMPORTED","EXPO_SDK_NOT_IMPORTED","getExpoSdkStatus","validator","jsonschema","Validator","validationResult","validate","fullMessage","errors","error","stack","replace"],"mappings":";;;;;;;;+BAgCAA,WAAqCC,WAArCD,EAAkD;AAChD,QAAI;AACFE,UAAIC,qBAAqBC,MAAMC,iDAAW,KAAXA,EAAkB,CAAC,WAAD,CAAlBA,CAA/BH;AACAA,UAAII,aAAaC,oCAAEC,IAAFD,CAAOJ,mBAAmBM,MAA1BF,CAAjBL;AACA,UAAIQ,oCAAOC,EAAPD,CAAUJ,UAAVI,EAAsBE,eAAtBF,KAA0CA,oCAAOG,GAAPH,CAAWJ,UAAXI,EAAuBI,eAAvBJ,CAA9C,EAAuF;AACrFK,gDAAaC,QAAbD,CACEd,WADFc,EAEE,MAFFA,EAGG,oCAAmCT,UAAW,0CAAyCM,eAAgB,UAASE,eAAgB,GAHnIC,EAIE,oBAJFA;AAMA,eAAOE,KAAP;AACF,OARA,MAQO;AACLF,gDAAaG,iBAAbH,CAA+Bd,WAA/Bc,EAA4C,oBAA5CA;AACF;AACF,KAdA,CAcE,OAAOI,CAAP,EAAU;AACVJ,8CAAaK,UAAbL,CACEd,WADFc,EAEE,MAFFA,EAGG,0EAAyEH,eAAgB,UAASE,eAAgB,GAHrHC,EAIE,oBAJFA;AAMA,aAAOM,OAAP;AACF;;AAEA,WAAOC,SAAP;AACF,G;;kBA1BeC,qB;;;;;;gCA4BfvB,WAA0CC,WAA1CD,EAAuD;AACrD;AACA,QAAI,CAACwB,gCAASC,mBAATD,EAAL,EAAqC;AACnCT,8CAAaG,iBAAbH,CAA+Bd,WAA/Bc,EAA4C,yBAA5CA;AACA;AACF;;AAEAb,QAAIwB,kBAAkBtB,MAAMoB,gCAASG,yBAATH,CAAmCvB,WAAnCuB,CAA5BtB;;AAEA;AACA,QAAI,CAACwB,eAAL,EAAsB;AACpB;AACAX,8CAAaG,iBAAbH,CAA+Bd,WAA/Bc,EAA4C,yBAA5CA;AACA;AACF;;AAEA,QAAIL,oCAAOC,EAAPD,CAAUgB,eAAVhB,EAA2BkB,oBAA3BlB,CAAJ,EAAsD;AACpDR,UAAI2B,iBAAkB,uDAAsDH,eAAgB,gMAA+LE,oBAAqB,GAAhT1B;;AAEA;AACA,UAAI4B,QAAQC,QAARD,KAAqB,QAAzB,EAAmC;AACjCD,0BAAmB,qFAAnBA;AACF;AACAd,8CAAaK,UAAbL,CACEd,WADFc,EAEE,MAFFA,EAGEc,cAHFd,EAIE,yBAJFA;AAMF,KAbA,MAaO;AACLA,8CAAaG,iBAAbH,CAA+Bd,WAA/Bc,EAA4C,yBAA5CA;AACF;AACF,G;;kBAhCeiB,0B;;;;;;gCAkCRhC,WACLC,WADKD,EAELiC,UAFKjC,EAG+B;AACpCE,QAAI,EAAEgC,GAAF,EAAOC,GAAP,KAAe/B,MAAMW,wCAAaqB,mBAAbrB,CAAiCd,WAAjCc,CAAzBb;AACAA,QAAImC,SAASC,KAAKC,KAALD,EAAWlC,MAAMoC,YAAGC,QAAHD,CAAYE,OAAZF,CAAoBP,UAApBO,EAAgC,MAAhCA,CAAjBF,EAAbpC;AACA,WAAOyC,mBAAmBT,GAAnBS,EAAwBN,OAAOA,MAA/BM,EAAuC,UAAvCA,EAAmD,aAAnDA,CAAP;AACF,G;;kBAPsBC,2B;;;;;;gCAkCtB5C,WAAyCC,WAAzCD,EAAsDkC,GAAtDlC,EAA2D;AACzD,QAAI;AACF,YAAM6C,eAAezC,MAAM0C,kCAAUC,oBAAVD,CAA+BZ,IAAIc,UAAnCF,CAA3B;AACA1C,YAAM6C,QAAQC,GAARD,CACJJ,aAAaM,GAAbN;AAAAA,sCAAiB7C,WAAO;AACtBoD,mBADsB;AAEtBf,kBAAQ,EAAEgB,MAAM,EAAEC,KAAF,EAASC,kBAAT,EAA6BC,gBAA7B,EAAR;AAFc,SAAPxD,EAGX;AACJ,gBAAMyD,QAAQlD,oCAAEmD,GAAFnD,CAAM2B,GAAN3B,EAAW6C,SAAX7C,CAAd;AACA,cAAI+C,SAASG,KAAb,EAAoB;AAClB,gBAAIF,kBAAJ,EAAwB;AACtB;AACA;AACA;AACA,oBAAMI,WAAWC,cAAKC,OAALD,CAAa3D,WAAb2D,EAA0BH,KAA1BG,CAAjB;AACA,oBAAME,cAActB,YAAGuB,UAAHvB,CAAcmB,QAAdnB,IAChBwB,8CAAS5D,MAAM6D,+CAAUN,QAAVM,EAAoB,CAApBA,EAAuB,IAAvBA,CAAfD,GAA6CE,IAD7B1B,GAEhB,CAACpC,MAAM+D,sCAAQzB,OAARyB,CAAgBC,IAAhBD,CAAqB,EAAEE,KAAKZ,KAAP,EAArBU,CAAP,EAA6CG,OAA7C,CACE,cADF,CAFJ;AAKA,kBAAI,CAACR,YAAYS,KAAZT,CAAkB,IAAIU,MAAJ,CAAWjB,kBAAX,CAAlBO,CAAL,EAAwD;AACtD,sBAAMW,aAAarE,MAAMW,wCAAa2D,mBAAb3D,CACvBd,WADuBc,CAAzB;AAGAA,wDAAaK,UAAbL,CACEd,WADFc,EAEE,MAFFA,EAGG,uBAAsB0D,UAAW,YAAWrB,SAAU,uBAAsBI,gBAAiB,sBAAqBC,KAAM,eAAcK,WAAY,UAASa,oCAAOC,OAAQ,EAH7K7D,EAIG,gCAA+BqC,SAAU,EAJ5CrC;AAMF,eAVA,MAUO;AACLA,wDAAaG,iBAAbH,CACEd,WADFc,EAEG,gCAA+BqC,SAAU,EAF5CrC;AAIF;AACF;AACF;AACD,SAlCD8B;;AAAAA;AAAAA;AAAAA;AAAAA,WADII,CAAN7C;;AAsCAW,8CAAaG,iBAAbH,CAA+Bd,WAA/Bc,EAA4C,8BAA5CA;AACF,KAzCA,CAyCE,OAAOI,CAAP,EAAU;AACVJ,8CAAaK,UAAbL,CACEd,WADFc,EAEE,OAFFA,EAGG,6CAA4CI,EAAE0D,OAAQ,GAHzD9D,EAIE,8BAJFA;AAMF;AACF,G;;kBAlDe+D,yB;;;;;;gCAoDf9E,WACEkC,GADFlC,EAEEmC,GAFFnC,EAGEC,WAHFD,EAImB;AACjB,QAAI,CAACkC,GAAD,IAAQ,CAACC,GAAb,EAAkB;AAChB;AACA,aAAOlB,KAAP;AACF;;AAEA,QAAI;AACFb,YAAM4B,2BAA2B/B,WAA3B+B,CAAN5B;AACF,KAFA,CAEE,OAAOe,CAAP,EAAU;AACVJ,8CAAaK,UAAbL,CACEd,WADFc,EAEE,MAFFA,EAGG,+CAA8CI,EAAE0D,OAAQ,GAH3D9D,EAIE,0CAJFA;AAMF;AACAA,4CAAaG,iBAAbH,CACEd,WADFc,EAEE,0CAFFA;;AAKA,UAAMgE,gBAAgB3E,MAAMW,wCAAaiE,eAAbjE,CAC1B6C,cAAKqB,IAALrB,CAAU3D,WAAV2D,EAAuB,UAAvBA,CAD0B7C,CAA5B;AAGA,UAAMmE,gBAAgB9E,MAAMW,wCAAaiE,eAAbjE,CAC1B6C,cAAKqB,IAALrB,CAAU3D,WAAV2D,EAAuB,UAAvBA,CAD0B7C,CAA5B;;AAIA,QAAIgE,iBAAiBG,aAArB,EAAoC;AAClCnE,8CAAaK,UAAbL,CACEd,WADFc,EAEE,MAFFA,EAGG,0GAHHA,EAIE,8BAJFA;AAMA,aAAOM,OAAP;AACF;AACAN,4CAAaG,iBAAbH,CAA+Bd,WAA/Bc,EAA4C,8BAA5CA;;AAEAb,QAAI8C,aAAad,IAAIc,UAArB9C;AACA,UAAMuE,aAAarE,MAAMW,wCAAa2D,mBAAb3D,CAAiCd,WAAjCc,CAAzB;AACA,QAAI;AACF;AACAb,UAAImC,SAASjC,MAAM0C,kCAAUqC,cAAVrC,CAAyBE,UAAzBF,CAAnB5C;AACAA,UAAI,EAAEkF,YAAF,KAAmBzC,mBACrBT,GADqBS,EAErBN,MAFqBM,EAGrB8B,UAHqB9B,EAIrBK,UAJqBL,CAAvBzC;;AAOA,UAAIkF,YAAJ,EAAkB;AAChBrE,gDAAaK,UAAbL,CACEd,WADFc,EAEE,MAFFA,EAGEqE,YAHFrE,EAIE,0BAJFA;AAMA,eAAOM,OAAP;AACF,OARA,MAQO;AACLN,gDAAaG,iBAAbH,CAA+Bd,WAA/Bc,EAA4C,0BAA5CA;AACF;;AAEAA,8CAAaG,iBAAbH,CACEd,WADFc,EAEE,oCAFFA;AAIF,KA1BA,CA0BE,OAAOI,CAAP,EAAU;AACVJ,8CAAaK,UAAbL,CACEd,WADFc,EAEE,MAFFA,EAGG,+BAA8B0D,UAAW,KAAItD,EAAE0D,OAAQ,GAH1D9D,EAIE,oCAJFA;AAMF;;AAEA;AACA,QAAIiC,eAAe,aAAnB,EAAkC;AAChCjC,8CAAaK,UAAbL,CACEd,WADFc,EAEE,MAFFA,EAGG,mFAAkF0D,UAAW,EAHhG1D,EAIE,oBAJFA;AAMA,aAAOM,OAAP;AACF;AACAN,4CAAaG,iBAAbH,CAA+Bd,WAA/Bc,EAA4C,oBAA5CA;;AAEA;AACA,QAAI,CAACoB,IAAIkD,YAAL,IAAqB,CAAClD,IAAIkD,YAAJlD,CAAiB,cAAjBA,CAA1B,EAA4D;AAC1DpB,8CAAaK,UAAbL,CACEd,WADFc,EAEE,MAFFA,EAGG,+DAHHA,EAIE,wCAJFA;AAMA,aAAOM,OAAP;AACF;AACAN,4CAAaG,iBAAbH,CACEd,WADFc,EAEE,wCAFFA;;AAKA;AACAb,QAAIoF,cAAclF,MAAMmF,8BAAIC,gBAAJD,EAAxBrF;AACA,QAAI,CAACoF,WAAL,EAAkB;AAChBvE,8CAAaK,UAAbL,CACEd,WADFc,EAEE,MAFFA,EAGG,kDAHHA,EAIE,iCAJFA;AAMA,aAAOM,OAAP;AACF;AACAN,4CAAaG,iBAAbH,CACEd,WADFc,EAEE,iCAFFA;;AAKA,QAAI,CAACuE,YAAYtC,UAAZsC,CAAL,EAA8B;AAC5BvE,8CAAaK,UAAbL,CACEd,WADFc,EAEE,MAFFA,EAGG,kDAAiDR,oCAAEkF,IAAFlF,CAAO+E,WAAP/E,EAAoB0E,IAApB1E,CAAyB,IAAzBA,CAA+B,EAHnFQ,EAIE,4BAJFA;AAMA,aAAOM,OAAP;AACF;AACAN,4CAAaG,iBAAbH,CAA+Bd,WAA/Bc,EAA4C,4BAA5CA;;AAEA,QAAI4D,oCAAOe,UAAPf,CAAkBgB,0BAAtB,EAAkD;AAChDzF,UAAI0F,cAAczD,IAAIkD,YAAJlD,CAAiB,cAAjBA,CAAlBjC;;AAEA;AACA;AACA,UAAI,CAAC0F,YAAYrB,KAAZqB,CAAkB,sCAAlBA,CAAL,EAAgE;AAC9D7E,gDAAaK,UAAbL,CACEd,WADFc,EAEE,MAFFA,EAGG,yDAAwD4D,oCAAOC,OAAQ,GAH1E7D,EAIE,4BAJFA;AAMA,eAAOM,OAAP;AACF;AACAN,8CAAaG,iBAAbH,CAA+Bd,WAA/Bc,EAA4C,4BAA5CA;;AAEA,UAAI;AACFb,YAAI2F,iBAAiBD,YAAYrB,KAAZqB,CAAkB,mBAAlBA,EAAuC,CAAvCA,CAArB1F;AACAA,YAAI4F,mBAAmBR,YAAYtC,UAAZsC,CAAvBpF;;AAEA;AACA,YACEQ,oCAAOqF,KAAPrF,CAAasF,gCAASC,sBAATD,CAAgCH,cAAhCG,CAAbtF,MACAA,oCAAOqF,KAAPrF,CACEsF,gCAASC,sBAATD,CACEF,iBAAiB,oBAAjBA,CADFE,CADFtF,CAFF,EAOE;AACAK,kDAAaK,UAAbL,CACEd,WADFc,EAEE,MAFFA,EAGG,2DAA0DiC,UAAW,sCAAqC8C,iBAAiB,oBAAjBA,CAAuC,EAHpJ/E,EAIE,wCAJFA;AAMA,iBAAOM,OAAP;AACF;AACAN,gDAAaG,iBAAbH,CACEd,WADFc,EAEE,wCAFFA;;AAKAA,gDAAaG,iBAAbH,CACEd,WADFc,EAEE,0CAFFA;AAIF,OA9BA,CA8BE,OAAOI,CAAP,EAAU;AACVJ,gDAAaK,UAAbL,CACEd,WADFc,EAEE,MAFFA,EAGG,YAAW6E,WAAY,0GAH1B7E,EAIE,0CAJFA;AAMA,eAAOM,OAAP;AACF;AACF;;AAEA;;AAEA,WAAOC,SAAP;AACF,G;;kBAlMe4E,mC;;;;;AAoMf;;;;gCACAlG,WAAyCC,WAAzCD,EAAuE;AACrEE,QAAI,EAAEgC,GAAF,EAAOC,GAAP,KAAe/B,MAAMW,wCAAaqB,mBAAbrB,CAAiCd,WAAjCc,CAAzBb;AACAA,QAAIiG,kBAAkBlG,WAAtBC;AACA,QAAIgC,IAAIiE,eAAR,EAAyB;AACvBA,wBAAkBvC,cAAKqB,IAALrB,CAAU3D,WAAV2D,EAAuB1B,IAAIiE,eAA3BvC,CAAlBuC;AACF;;AAEA;AACA,QAAI;AACFjG,UAAIkG,SAAS5D,YAAG6D,QAAH7D,CAAYoB,cAAKqB,IAALrB,CAAUuC,eAAVvC,EAA2B,cAA3BA,CAAZpB,CAAbtC;AACA,UAAI,CAACkG,OAAOE,WAAPF,EAAL,EAA2B;AACzBrF,gDAAaC,QAAbD,CACEd,WADFc,EAEE,MAFFA,EAGG,iGAHHA,EAIE,6BAJFA;AAMA,eAAOE,KAAP;AACF;;AAEAF,8CAAaG,iBAAbH,CAA+Bd,WAA/Bc,EAA4C,6BAA5CA;AACF,KAbA,CAaE,OAAOI,CAAP,EAAU;AACVJ,8CAAaC,QAAbD,CACEd,WADFc,EAEE,MAFFA,EAGG,iGAHHA,EAIE,6BAJFA;AAMA,aAAOE,KAAP;AACF;;AAEA;AACA,QAAI;AACFf,UAAIkG,SAAS5D,YAAG6D,QAAH7D,CACXoB,cAAKqB,IAALrB,CACEuC,eADFvC,EAEE,cAFFA,EAGE,cAHFA,EAIE,WAJFA,EAKE,QALFA,CADWpB,CAAbtC;AASA,UAAI,CAACkG,OAAOG,MAAPH,EAAL,EAAsB;AACpBrF,gDAAaC,QAAbD,CACEd,WADFc,EAEE,MAFFA,EAGG,6FAHHA,EAIE,mCAJFA;AAMA,eAAOE,KAAP;AACF;;AAEAF,8CAAaG,iBAAbH,CACEd,WADFc,EAEE,mCAFFA;AAIF,KAxBA,CAwBE,OAAOI,CAAP,EAAU;AACVJ,8CAAaC,QAAbD,CACEd,WADFc,EAEE,MAFFA,EAGG,6FAHHA,EAIE,mCAJFA;AAMA,aAAOE,KAAP;AACF;;AAEA;AACA,QAAIkB,IAAIkD,YAAR,EAAsB;AACpBjF,YAAMoG,gCAASC,2BAATD,EAANpG;;AAEA,UAAI;AACFA,cAAMC,iDAAW,KAAXA,EAAkB,CAAC,WAAD,CAAlBA,CAAND;AACF,OAFA,CAEE,OAAOe,CAAP,EAAU;AACVJ,gDAAaK,UAAbL,CACEd,WADFc,EAEE,MAFFA,EAGG,qGAHHA,EAIE,sBAJFA;AAMA,eAAOM,OAAP;AACF;AACAN,8CAAaG,iBAAbH,CAA+Bd,WAA/Bc,EAA4C,sBAA5CA;;AAEAb,UAAIwG,KAAJxG;AACA,UAAI;AACFA,YAAIyG,eAAevG,MAAMC,iDACvB,KADuBA,EAEvB,CAAC,IAAD,EAAO,QAAP,EAAiB,SAAjB,EAA4B,GAA5B,CAFuBA,EAGvB;AACEuG,eAAKT;AADP,SAHuB9F,CAAzBH;AAOAwG,gBAAQC,aAAalG,MAArBiG;AACF,OATA,CASE,OAAOvF,CAAP,EAAU;AACVuF,gBAAQvF,EAAEV,MAAViG,CADU,CACM;AAClB;;AAEA,UAAI,CAACA,KAAL,EAAY;AACV3F,gDAAaK,UAAbL,CACEd,WADFc,EAEE,MAFFA,EAGG,2EAA0Ed,WAAY,GAHzFc,EAIE,6BAJFA;AAMA,eAAOM,OAAP;AACF;AACAN,8CAAaG,iBAAbH,CAA+Bd,WAA/Bc,EAA4C,6BAA5CA;;AAEAb,UAAI2G,iBAAJ3G;AACA,UAAI;AACF2G,4BAAoBvE,KAAKC,KAALD,CAAWoE,KAAXpE,EAAkB+C,YAAtCwB;AACF,OAFA,CAEE,OAAO1F,CAAP,EAAU;AACVJ,gDAAaK,UAAbL,CACEd,WADFc,EAEE,MAFFA,EAGG,+CAA8CI,EAAE0D,OAAQ,EAH3D9D,EAIE,sCAJFA;AAMA,eAAOM,OAAP;AACF;AACAN,8CAAaG,iBAAbH,CACEd,WADFc,EAEE,sCAFFA;;AAKA,UAAI8F,iBAAJ,EAAuB;AACrB3G,YAAI4G,eAAe,EAAnB5G;AACAK,4CAAEwG,OAAFxG,CAAU4B,IAAIkD,YAAd9E,EAA4B,UAACyG,eAAD,EAAkBC,UAAlB,EAAiC;AAC3D/G,cAAIgH,sBAAsBL,kBAAkBI,UAAlBJ,CAA1B3G;AACA,cAAI+G,eAAe,OAAfA,IAA0BD,gBAAgBzC,KAAhByC,CAAsB,OAAtBA,CAA9B,EAA8D;AAC5D;AACF,WAFA,MAEO,IAAI,CAACE,mBAAD,IAAwB,CAACA,oBAAoBC,OAAjD,EAA0D;AAC/D,gBAAID,uBAAuBA,oBAAoBE,WAA/C,EAA4D;AAC1DN,2BAAaO,IAAbP,CACG,aAAYG,UAAW,gDAA+Cd,eAAgB,uBADzFW;AAGF,aAJA,MAIO;AACLA,2BAAaO,IAAbP,CACG,aAAYG,UAAW,gCAD1BH;AAGF;AACF,WAVO,MAUA,IACLG,eAAe,cAAfA,IACA,CAACvG,oCAAO4G,SAAP5G,CAAiBwG,oBAAoBC,OAArCzG,EAA8CsG,eAA9CtG,CADDuG,IAEA,CAACD,gBAAgBO,QAAhBP,CAAyBE,oBAAoBM,IAA7CR,CAHI,EAIL;AACA;AACA;AACA;AACAF,yBAAaO,IAAbP,CACG,8BAA6BI,oBAAoBC,OAAQ,QAAOF,UAAW,uCAAsCD,eAAgB,EADpIF;AAGF;AACD,SA1BDvG;;AA4BA,YAAIuG,aAAaW,MAAbX,GAAsB,CAA1B,EAA6B;AAC3BA,uBAAaO,IAAbP,CACG,8EAA6EX,eAAgB,eADhGW;AAGA/F,kDAAaK,UAAbL,CACEd,WADFc,EAEE,MAFFA,EAGE+F,aAAa7B,IAAb6B,CAAkB,IAAlBA,CAHF/F,EAIE,4BAJFA;AAMA,iBAAOM,OAAP;AACF,SAXA,MAWO;AACLN,kDAAaG,iBAAbH,CACEd,WADFc,EAEE,4BAFFA;AAIF;AACF;AACF;;AAEA,WAAOO,SAAP;AACF,G;;kBAhLeoG,yB;;;;;;gCAkLR1H,WACLC,WADKD,EAEY;AACjB,WAAO2H,cAAc1H,WAAd0H,EAA2B,KAA3BA,CAAP;AACF,G;;kBAJsBC,uB;;;;;;gCAMf5H,WACLC,WADKD,EAEY;AACjB,WAAO2H,cAAc1H,WAAd0H,EAA2B,IAA3BA,CAAP;AACF,G;;kBAJsBE,wB;;;;;;iCAMtB7H,WACEC,WADFD,EAEE8H,YAFF9H,EAGmB;AACjBE,QAAI,EAAEgC,GAAF,EAAOC,GAAP,KAAe/B,MAAMW,wCAAaqB,mBAAbrB,CAAiCd,WAAjCc,CAAzBb;;AAEAA,QAAI6H,SAAS3H,MAAMmB,sBAAsBtB,WAAtBsB,CAAnBrB;AACA,QAAI6H,WAAW9G,KAAf,EAAsB;AACpB,aAAO8G,MAAP;AACF;;AAEA7H,QAAI8H,YAAY5H,MAAM8F,oCAAoChE,GAApCgE,EAAyC/D,GAAzC+D,EAA8CjG,WAA9CiG,CAAtBhG;AACA,QAAI8H,YAAYD,MAAhB,EAAwB;AACtBA,eAASC,SAATD;AACF;;AAEA;AACA,QAAID,YAAJ,EAAkB;AAChBhD,gCAA0B7E,WAA1B6E,EAAuC5C,GAAvC4C;AACF;;AAEA;AACA;AACA,QAAIiD,WAAW9G,KAAX8G,IAAoB7F,GAApB6F,IAA2B,CAAC7F,IAAI+F,2BAApC,EAAiE;AAC/D/H,UAAIgI,oBAAoB9H,MAAMsH,0BAA0BzH,WAA1ByH,CAA9BxH;AACA,UAAIgI,oBAAoBH,MAAxB,EAAgC;AAC9B,eAAOG,iBAAP;AACF;AACF;;AAEA,WAAOH,MAAP;AACF,G;;kBA/BeJ,a;;;;;;iCAqCR3H,WAAgCC,WAAhCD,EAAsE;AAC3EE,QAAI,EAAEiC,GAAF,KAAU/B,MAAMW,wCAAaqB,mBAAbrB,CAAiCd,WAAjCc,CAApBb;;AAEA,QAAI;AACFA,UAAIiI,MAAJjI;AACA,UAAIiC,IAAIkD,YAAJlD,CAAiB,UAAjBA,CAAJ,EAAkC;AAChCgG,iBAAS,UAATA;AACF,OAFA,MAEO,IAAIhG,IAAIkD,YAAJlD,CAAiB,MAAjBA,CAAJ,EAA8B;AACnCgG,iBAAS,MAATA;AACF,OAFO,MAEA;AACL,eAAOC,sBAAP;AACF;;AAEAlI,UAAImI,eAAezE,cAAKqB,IAALrB,CAAU3D,WAAV2D,EAAuBzB,IAAImG,IAA3B1E,CAAnB1D;AACAA,UAAIqI,WAAWnI,MAAMoC,YAAGC,QAAHD,CAAYE,OAAZF,CAAoB6F,YAApB7F,EAAkC,MAAlCA,CAArBtC;;AAEA;AACA,UACEqI,SAAShB,QAATgB,CAAmB,SAAQJ,MAAO,GAAlCI,KACAA,SAAShB,QAATgB,CAAmB,YAAWJ,MAAO,IAArCI,CAFF,EAGE;AACA,eAAOC,+BAAP;AACF,OALA,MAKO;AACL,eAAOC,qBAAP;AACF;AACF,KAtBA,CAsBE,OAAOtH,CAAP,EAAU;AACV,aAAOsH,qBAAP;AACF;AACF,G;;kBA5BsBC,gB;;;;;QArfN/F,kB,GAAAA,kB;;AAnGhB;;;;AAEA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;AACA;;;;AACA;AAAA;AAAA;;AACA;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AAEA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;;;;;AAEO,MAAMrB,gCAAY,CAAlB;AACA,MAAMD,4BAAU,CAAhB;AACA,MAAMJ,wBAAQ,CAAd;;AAEP,MAAMW,uBAAuB,OAA7B;AACA,MAAMhB,kBAAkB,OAAxB;AACA,MAAME,kBAAkB,OAAxB;;AAyEO,SAAS6B,kBAAT,CACLT,GADK,EAELG,MAFK,EAGLoC,UAHK,EAILzB,UAJK,EAKsB;AAC3B9C,MAAIyI,YAAY,IAAIC,4CAAWC,SAAf,EAAhB3I;AACAA,MAAI4I,mBAAmBH,UAAUI,QAAVJ,CAAmBzG,GAAnByG,EAAwBtG,MAAxBsG,CAAvBzI;;AAEAA,MAAI8I,WAAJ9I;AACA,MAAI4I,iBAAiBG,MAAjBH,IAA2BA,iBAAiBG,MAAjBH,CAAwBrB,MAAxBqB,GAAiC,CAAhE,EAAmE;AACjEE,kBAAe,mBAAkBF,iBAAiBG,MAAjBH,CAAwBrB,MAAxBqB,GAAiC,CAAjCA,GAAqC,GAArCA,GAA2C,EAAG,OAAMrE,UAAW,wCAAuCzB,UAAW,6BAAlJgG;AACA,SAAK9I,IAAIgJ,KAAT,IAAkBJ,iBAAiBG,MAAnC,EAA2C;AACzC;AACA/I,UAAI2E,UAAUqE,MAAMC,KAAND,CACXE,OADWF,CACH,aADGA,EACY,EADZA,EAEXE,OAFWF,CAEH,qBAFGA,EAEqB,aAAYzE,UAAW,EAF5CyE,EAGXE,OAHWF,CAGH,6BAHGA,EAG4B,qBAH5BA,CAAdhJ;AAIA8I,qBAAgB,SAAQnE,OAAQ,GAAhCmE;AACF;AACF;;AAEA,SAAO,EAAE5D,cAAc4D,WAAhB,EAAP;AACF;;AA0dO,MAAMR,4EAAkC,CAAxC;AACA,MAAMJ,0DAAyB,CAA/B;AACA,MAAMK,wDAAwB,CAA9B","file":"../../project/Doctor.js","sourcesContent":["/**\n * @flow\n */\n\nimport 'instapromise';\n\nimport _ from 'lodash';\nimport semver from 'semver';\nimport fs from 'fs';\nimport jsonschema from 'jsonschema';\nimport path from 'path';\nimport request from 'request';\nimport spawnAsync from '@exponent/spawn-async';\nimport readChunk from 'read-chunk';\nimport fileType from 'file-type';\n\nimport * as ExpSchema from './ExpSchema';\nimport * as ProjectUtils from './ProjectUtils';\nimport Api from '../Api';\nimport * as Binaries from '../Binaries';\nimport Config from '../Config';\nimport * as Versions from '../Versions';\nimport * as Watchman from '../Watchman';\n\nexport const NO_ISSUES = 0;\nexport const WARNING = 1;\nexport const FATAL = 2;\n\nconst MIN_WATCHMAN_VERSION = '4.6.0';\nconst MIN_NPM_VERSION = '3.0.0';\nconst BAD_NPM_VERSION = '5.0.0';\n\nasync function _checkNpmVersionAsync(projectRoot) {\n  try {\n    let npmVersionResponse = await spawnAsync('npm', ['--version']);\n    let npmVersion = _.trim(npmVersionResponse.stdout);\n    if (semver.lt(npmVersion, MIN_NPM_VERSION) || semver.gte(npmVersion, BAD_NPM_VERSION)) {\n      ProjectUtils.logError(\n        projectRoot,\n        'expo',\n        `Error: You are using npm version ${npmVersion}. Please use an npm version that is >= ${MIN_NPM_VERSION} and < ${BAD_NPM_VERSION}.`,\n        'doctor-npm-version'\n      );\n      return FATAL;\n    } else {\n      ProjectUtils.clearNotification(projectRoot, 'doctor-npm-version');\n    }\n  } catch (e) {\n    ProjectUtils.logWarning(\n      projectRoot,\n      'expo',\n      `Warning: Could not determine npm version. Make sure your version is >= ${MIN_NPM_VERSION} and < ${BAD_NPM_VERSION}.`,\n      'doctor-npm-version'\n    );\n    return WARNING;\n  }\n\n  return NO_ISSUES;\n}\n\nasync function _checkWatchmanVersionAsync(projectRoot) {\n  // There's no point in checking any of this stuff if watchman isn't supported on this platform\n  if (!Watchman.isPlatformSupported()) {\n    ProjectUtils.clearNotification(projectRoot, 'doctor-watchman-version');\n    return;\n  }\n\n  let watchmanVersion = await Watchman.unblockAndGetVersionAsync(projectRoot);\n\n  // If we can't get the watchman version, `getVersionAsync` will return `null`\n  if (!watchmanVersion) {\n    // watchman is probably just not installed\n    ProjectUtils.clearNotification(projectRoot, 'doctor-watchman-version');\n    return;\n  }\n\n  if (semver.lt(watchmanVersion, MIN_WATCHMAN_VERSION)) {\n    let warningMessage = `Warning: You are using an old version of watchman (v${watchmanVersion}). This may cause problems for you.\\n\\nWe recommend that you either uninstall watchman (and XDE will try to use a copy it is bundled with) or upgrade watchman to a newer version, at least v${MIN_WATCHMAN_VERSION}.`;\n\n    // Add a note about homebrew if the user is on a Mac\n    if (process.platform === 'darwin') {\n      warningMessage += `\\n\\nIf you are using homebrew, try:\\nbrew uninstall watchman; brew install watchman`;\n    }\n    ProjectUtils.logWarning(\n      projectRoot,\n      'expo',\n      warningMessage,\n      'doctor-watchman-version'\n    );\n  } else {\n    ProjectUtils.clearNotification(projectRoot, 'doctor-watchman-version');\n  }\n}\n\nexport async function validateWithSchemaFileAsync(\n  projectRoot: string,\n  schemaPath: string\n): Promise<{ errorMessage?: string }> {\n  let { exp, pkg } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n  let schema = JSON.parse(await fs.readFile.promise(schemaPath, 'utf8'));\n  return validateWithSchema(exp, schema.schema, 'exp.json', 'UNVERSIONED');\n}\n\nexport function validateWithSchema(\n  exp: any,\n  schema: any,\n  configName: string,\n  sdkVersion: string\n): { errorMessage?: string } {\n  let validator = new jsonschema.Validator();\n  let validationResult = validator.validate(exp, schema);\n\n  let fullMessage;\n  if (validationResult.errors && validationResult.errors.length > 0) {\n    fullMessage = `Warning: Problem${validationResult.errors.length > 1 ? 's' : ''} in ${configName}. See https://docs.expo.io/versions/v${sdkVersion}/guides/configuration.html.`;\n    for (let error of validationResult.errors) {\n      // Formate the message nicely\n      let message = error.stack\n        .replace(/instance\\./g, '')\n        .replace(/exists in instance/g, `exists in ${configName}`)\n        .replace('instance additionalProperty', 'additional property');\n      fullMessage += `\\n  - ${message}.`;\n    }\n  }\n\n  return { errorMessage: fullMessage };\n}\n\nasync function _validateAssetFieldsAsync(projectRoot, exp) {\n  try {\n    const assetSchemas = await ExpSchema.getAssetSchemasAsync(exp.sdkVersion);\n    await Promise.all(\n      assetSchemas.map(async ({\n        fieldPath,\n        schema: { meta: { asset, contentTypePattern, contentTypeHuman } },\n      }) => {\n        const value = _.get(exp, fieldPath);\n        if (asset && value) {\n          if (contentTypePattern) {\n            // NOTE(nikki): The '4100' below should be enough for most file types, though we\n            //              could probably go shorter....\n            //              http://www.garykessler.net/library/file_sigs.html\n            const filePath = path.resolve(projectRoot, value);\n            const contentType = fs.existsSync(filePath)\n              ? fileType(await readChunk(filePath, 0, 4100)).mime\n              : (await request.promise.head({ url: value })).headers[\n                  'content-type'\n                ];\n            if (!contentType.match(new RegExp(contentTypePattern))) {\n              const configName = await ProjectUtils.configFilenameAsync(\n                projectRoot\n              );\n              ProjectUtils.logWarning(\n                projectRoot,\n                'expo',\n                `Warning: Problem in ${configName}. Field '${fieldPath}' should point to a ${contentTypeHuman}, but the file at '${value}' has type '${contentType}'. See ${Config.helpUrl}`,\n                `doctor-validate-asset-fields-${fieldPath}`\n              );\n            } else {\n              ProjectUtils.clearNotification(\n                projectRoot,\n                `doctor-validate-asset-fields-${fieldPath}`\n              );\n            }\n          }\n        }\n      })\n    );\n\n    ProjectUtils.clearNotification(projectRoot, 'doctor-validate-asset-fields');\n  } catch (e) {\n    ProjectUtils.logWarning(\n      projectRoot,\n      'expon',\n      `Warning: Problem validating asset fields: ${e.message}.`,\n      'doctor-validate-asset-fields'\n    );\n  }\n}\n\nasync function _validatePackageJsonAndExpJsonAsync(\n  exp,\n  pkg,\n  projectRoot\n): Promise<number> {\n  if (!exp || !pkg) {\n    // readConfigJsonAsync already logged an error\n    return FATAL;\n  }\n\n  try {\n    await _checkWatchmanVersionAsync(projectRoot);\n  } catch (e) {\n    ProjectUtils.logWarning(\n      projectRoot,\n      'expo',\n      `Warning: Problem checking watchman version. ${e.message}.`,\n      'doctor-problem-checking-watchman-version'\n    );\n  }\n  ProjectUtils.clearNotification(\n    projectRoot,\n    'doctor-problem-checking-watchman-version'\n  );\n\n  const expJsonExists = await ProjectUtils.fileExistsAsync(\n    path.join(projectRoot, 'exp.json')\n  );\n  const appJsonExists = await ProjectUtils.fileExistsAsync(\n    path.join(projectRoot, 'app.json')\n  );\n\n  if (expJsonExists && appJsonExists) {\n    ProjectUtils.logWarning(\n      projectRoot,\n      'expo',\n      `Warning: Both app.json and exp.json exist in this directory. Only one should exist for a single project.`,\n      'doctor-both-app-and-exp-json'\n    );\n    return WARNING;\n  }\n  ProjectUtils.clearNotification(projectRoot, 'doctor-both-app-and-exp-json');\n\n  let sdkVersion = exp.sdkVersion;\n  const configName = await ProjectUtils.configFilenameAsync(projectRoot);\n  try {\n    // TODO(perry) figure out a way to tell the schema validator whether this is exp.json or app.json\n    let schema = await ExpSchema.getSchemaAsync(sdkVersion);\n    let { errorMessage } = validateWithSchema(\n      exp,\n      schema,\n      configName,\n      sdkVersion\n    );\n\n    if (errorMessage) {\n      ProjectUtils.logWarning(\n        projectRoot,\n        'expo',\n        errorMessage,\n        'doctor-schema-validation'\n      );\n      return WARNING;\n    } else {\n      ProjectUtils.clearNotification(projectRoot, 'doctor-schema-validation');\n    }\n\n    ProjectUtils.clearNotification(\n      projectRoot,\n      'doctor-schema-validation-exception'\n    );\n  } catch (e) {\n    ProjectUtils.logWarning(\n      projectRoot,\n      'expo',\n      `Warning: Problem validating ${configName}: ${e.message}.`,\n      'doctor-schema-validation-exception'\n    );\n  }\n\n  // Warn if sdkVersion is UNVERSIONED\n  if (sdkVersion === 'UNVERSIONED') {\n    ProjectUtils.logWarning(\n      projectRoot,\n      'expo',\n      `Warning: Using unversioned Expo SDK. Do not publish until you set sdkVersion in ${configName}`,\n      'doctor-unversioned'\n    );\n    return WARNING;\n  }\n  ProjectUtils.clearNotification(projectRoot, 'doctor-unversioned');\n\n  // react-native is required\n  if (!pkg.dependencies || !pkg.dependencies['react-native']) {\n    ProjectUtils.logWarning(\n      projectRoot,\n      'expo',\n      `Warning: Can't find react-native in package.json dependencies`,\n      'doctor-no-react-native-in-package-json'\n    );\n    return WARNING;\n  }\n  ProjectUtils.clearNotification(\n    projectRoot,\n    'doctor-no-react-native-in-package-json'\n  );\n\n  // TODO(adam) set up caching for this\n  let sdkVersions = await Api.sdkVersionsAsync();\n  if (!sdkVersions) {\n    ProjectUtils.logWarning(\n      projectRoot,\n      'expo',\n      `Warning: Couldn't connect to SDK versions server`,\n      'doctor-versions-endpoint-failed'\n    );\n    return WARNING;\n  }\n  ProjectUtils.clearNotification(\n    projectRoot,\n    'doctor-versions-endpoint-failed'\n  );\n\n  if (!sdkVersions[sdkVersion]) {\n    ProjectUtils.logWarning(\n      projectRoot,\n      'expo',\n      `Warning: Invalid sdkVersion. Valid options are ${_.keys(sdkVersions).join(', ')}`,\n      'doctor-invalid-sdk-version'\n    );\n    return WARNING;\n  }\n  ProjectUtils.clearNotification(projectRoot, 'doctor-invalid-sdk-version');\n\n  if (Config.validation.reactNativeVersionWarnings) {\n    let reactNative = pkg.dependencies['react-native'];\n\n    // Expo fork of react-native is required\n    // TODO(2016-12-20): Remove the check for our old \"exponentjs\" org eventually\n    if (!reactNative.match(/(exponent(?:js)?|expo)\\/react-native/)) {\n      ProjectUtils.logWarning(\n        projectRoot,\n        'expo',\n        `Warning: Not using the Expo fork of react-native. See ${Config.helpUrl}.`,\n        'doctor-not-using-expo-fork'\n      );\n      return WARNING;\n    }\n    ProjectUtils.clearNotification(projectRoot, 'doctor-not-using-expo-fork');\n\n    try {\n      let reactNativeTag = reactNative.match(/sdk-\\d+\\.\\d+\\.\\d+/)[0];\n      let sdkVersionObject = sdkVersions[sdkVersion];\n\n      // TODO: Want to be smarter about this. Maybe warn if there's a newer version.\n      if (\n        semver.major(Versions.parseSdkVersionFromTag(reactNativeTag)) !==\n        semver.major(\n          Versions.parseSdkVersionFromTag(\n            sdkVersionObject['expoReactNativeTag']\n          )\n        )\n      ) {\n        ProjectUtils.logWarning(\n          projectRoot,\n          'expo',\n          `Warning: Invalid version of react-native for sdkVersion ${sdkVersion}. Use github:exponent/react-native#${sdkVersionObject['expoReactNativeTag']}`,\n          'doctor-invalid-version-of-react-native'\n        );\n        return WARNING;\n      }\n      ProjectUtils.clearNotification(\n        projectRoot,\n        'doctor-invalid-version-of-react-native'\n      );\n\n      ProjectUtils.clearNotification(\n        projectRoot,\n        'doctor-malformed-version-of-react-native'\n      );\n    } catch (e) {\n      ProjectUtils.logWarning(\n        projectRoot,\n        'expo',\n        `Warning: ${reactNative} is not a valid version. Version must be in the form of sdk-x.y.z. Please update your package.json file.`,\n        'doctor-malformed-version-of-react-native'\n      );\n      return WARNING;\n    }\n  }\n\n  // TODO: Check any native module versions here\n\n  return NO_ISSUES;\n}\n\n// TODO: use `yarn check`\nasync function _validateNodeModulesAsync(projectRoot): Promise<number> {\n  let { exp, pkg } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n  let nodeModulesPath = projectRoot;\n  if (exp.nodeModulesPath) {\n    nodeModulesPath = path.join(projectRoot, exp.nodeModulesPath);\n  }\n\n  // Check to make sure node_modules exists at all\n  try {\n    let result = fs.statSync(path.join(nodeModulesPath, 'node_modules'));\n    if (!result.isDirectory()) {\n      ProjectUtils.logError(\n        projectRoot,\n        'expo',\n        `Error: node_modules directory is missing. Please run \\`npm install\\` in your project directory.`,\n        'doctor-node-modules-missing'\n      );\n      return FATAL;\n    }\n\n    ProjectUtils.clearNotification(projectRoot, 'doctor-node-modules-missing');\n  } catch (e) {\n    ProjectUtils.logError(\n      projectRoot,\n      'expo',\n      `Error: node_modules directory is missing. Please run \\`npm install\\` in your project directory.`,\n      'doctor-node-modules-missing'\n    );\n    return FATAL;\n  }\n\n  // Check to make sure react native is installed\n  try {\n    let result = fs.statSync(\n      path.join(\n        nodeModulesPath,\n        'node_modules',\n        'react-native',\n        'local-cli',\n        'cli.js'\n      )\n    );\n    if (!result.isFile()) {\n      ProjectUtils.logError(\n        projectRoot,\n        'expo',\n        `Error: React native is not installed. Please run \\`npm install\\` in your project directory.`,\n        'doctor-react-native-not-installed'\n      );\n      return FATAL;\n    }\n\n    ProjectUtils.clearNotification(\n      projectRoot,\n      'doctor-react-native-not-installed'\n    );\n  } catch (e) {\n    ProjectUtils.logError(\n      projectRoot,\n      'expo',\n      `Error: React native is not installed. Please run \\`npm install\\` in your project directory.`,\n      'doctor-react-native-not-installed'\n    );\n    return FATAL;\n  }\n\n  // Validate all package.json dependencies are installed and up to date\n  if (pkg.dependencies) {\n    await Binaries.sourceBashLoginScriptsAsync();\n\n    try {\n      await spawnAsync('npm', ['--version']);\n    } catch (e) {\n      ProjectUtils.logWarning(\n        projectRoot,\n        'expo',\n        `\\`npm\\` command not found. If you have npm installed please run \\`npm install -g exp && exp path\\`.`,\n        'doctor-npm-not-found'\n      );\n      return WARNING;\n    }\n    ProjectUtils.clearNotification(projectRoot, 'doctor-npm-not-found');\n\n    let npmls;\n    try {\n      let npmlsCommand = await spawnAsync(\n        'npm',\n        ['ls', '--json', '--depth', '1'],\n        {\n          cwd: nodeModulesPath,\n        }\n      );\n      npmls = npmlsCommand.stdout;\n    } catch (e) {\n      npmls = e.stdout; // `npm ls` sometimes returns an error code\n    }\n\n    if (!npmls) {\n      ProjectUtils.logWarning(\n        projectRoot,\n        'expo',\n        `Problem checking node_modules dependencies. Could not run \\`npm ls\\` in ${projectRoot}.`,\n        'doctor-could-not-run-npm-ls'\n      );\n      return WARNING;\n    }\n    ProjectUtils.clearNotification(projectRoot, 'doctor-could-not-run-npm-ls');\n\n    let npmlsDependencies;\n    try {\n      npmlsDependencies = JSON.parse(npmls).dependencies;\n    } catch (e) {\n      ProjectUtils.logWarning(\n        projectRoot,\n        'expo',\n        `Problem checking node_modules dependencies: ${e.message}`,\n        'doctor-problem-checking-node-modules'\n      );\n      return WARNING;\n    }\n    ProjectUtils.clearNotification(\n      projectRoot,\n      'doctor-problem-checking-node-modules'\n    );\n\n    if (npmlsDependencies) {\n      let errorStrings = [];\n      _.forEach(pkg.dependencies, (versionRequired, dependency) => {\n        let installedDependency = npmlsDependencies[dependency];\n        if (dependency === 'react' && versionRequired.match(/alpha/)) {\n          // ignore alpha dependencies on react\n        } else if (!installedDependency || !installedDependency.version) {\n          if (installedDependency && installedDependency.peerMissing) {\n            errorStrings.push(\n              `Warning: '${dependency}' peer depencency missing. Run \\`npm ls\\` in ${nodeModulesPath} to see full warning.`\n            );\n          } else {\n            errorStrings.push(\n              `Warning: '${dependency}' dependency is not installed.`\n            );\n          }\n        } else if (\n          dependency !== 'react-native' &&\n          !semver.satisfies(installedDependency.version, versionRequired) &&\n          !versionRequired.includes(installedDependency.from)\n        ) {\n          // TODO: also check react-native\n          // For react native, `from` field looks like \"exponent/react-native#sdk-8.0.1\" and\n          // versionRequired looks like \"github:exponent/react-native#sdk-8.0.0\"\n          errorStrings.push(\n            `Warning: Installed version ${installedDependency.version} of '${dependency}' does not satisfy required version ${versionRequired}`\n          );\n        }\n      });\n\n      if (errorStrings.length > 0) {\n        errorStrings.push(\n          `\\nIf there is an issue running your project, please run \\`npm install\\` in ${nodeModulesPath} and restart.`\n        );\n        ProjectUtils.logWarning(\n          projectRoot,\n          'expo',\n          errorStrings.join('\\n'),\n          'doctor-node-modules-issues'\n        );\n        return WARNING;\n      } else {\n        ProjectUtils.clearNotification(\n          projectRoot,\n          'doctor-node-modules-issues'\n        );\n      }\n    }\n  }\n\n  return NO_ISSUES;\n}\n\nexport async function validateLowLatencyAsync(\n  projectRoot: string\n): Promise<number> {\n  return validateAsync(projectRoot, false);\n}\n\nexport async function validateWithNetworkAsync(\n  projectRoot: string\n): Promise<number> {\n  return validateAsync(projectRoot, true);\n}\n\nasync function validateAsync(\n  projectRoot: string,\n  allowNetwork: boolean\n): Promise<number> {\n  let { exp, pkg } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n\n  let status = await _checkNpmVersionAsync(projectRoot);\n  if (status === FATAL) {\n    return status;\n  }\n\n  let newStatus = await _validatePackageJsonAndExpJsonAsync(exp, pkg, projectRoot);\n  if (newStatus > status) {\n    status = newStatus;\n  }\n\n  // Don't block this! It has to make network requests so it's slow.\n  if (allowNetwork) {\n    _validateAssetFieldsAsync(projectRoot, exp);\n  }\n\n  // TODO: this broke once we started using yarn because `npm ls` doesn't\n  // work on a yarn install. Use `yarn check` in the future.\n  if (status !== FATAL && exp && !exp.ignoreNodeModulesValidation) {\n    let nodeModulesStatus = await _validateNodeModulesAsync(projectRoot);\n    if (nodeModulesStatus > status) {\n      return nodeModulesStatus;\n    }\n  }\n\n  return status;\n}\n\nexport const EXPO_SDK_INSTALLED_AND_IMPORTED = 0;\nexport const EXPO_SDK_NOT_INSTALLED = 1;\nexport const EXPO_SDK_NOT_IMPORTED = 2;\n\nexport async function getExpoSdkStatus(projectRoot: string): Promise<number> {\n  let { pkg } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n\n  try {\n    let sdkPkg;\n    if (pkg.dependencies['exponent']) {\n      sdkPkg = 'exponent';\n    } else if (pkg.dependencies['expo']) {\n      sdkPkg = 'expo';\n    } else {\n      return EXPO_SDK_NOT_INSTALLED;\n    }\n\n    let mainFilePath = path.join(projectRoot, pkg.main);\n    let mainFile = await fs.readFile.promise(mainFilePath, 'utf8');\n\n    // TODO: support separate .ios.js and .android.js files\n    if (\n      mainFile.includes(`from '${sdkPkg}'`) ||\n      mainFile.includes(`require('${sdkPkg}')`)\n    ) {\n      return EXPO_SDK_INSTALLED_AND_IMPORTED;\n    } else {\n      return EXPO_SDK_NOT_IMPORTED;\n    }\n  } catch (e) {\n    return EXPO_SDK_NOT_IMPORTED;\n  }\n}\n"],"sourceRoot":"/xdl/src"}